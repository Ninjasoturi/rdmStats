DROP PROCEDURE IF EXISTS rdmstats.rpl15monarea;
DELIMITER //
CREATE PROCEDURE rdmstats.rpl15monarea()
BEGIN

-- set vars
  SET @period = (select unix_timestamp(concat(date(now() - interval 75 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 75 minute)) DIV 900) * 900))) );
  SET @stop = (select unix_timestamp(concat(date(now() - interval 60 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 60 minute)) DIV 900) * 900))) );

-- get data
DROP TEMPORARY TABLE IF EXISTS rdmstats.monarea;
CREATE TEMPORARY TABLE rdmstats.monarea 
  (`location` point NOT NULL,
   `first_encounter` int(10) signed,
   `expire_timestamp` int(10) signed,
   `expire_timestamp_verified` tinyint(3) unsigned,
   `stats_reset` int(10) signed,
   `last_encounter` int(10) signed,
   `seen_wild` int(10) signed,
   `seen_stop` int(10) signed,
   `seen_cell` int(10) signed,
   `atk_iv` tinyint(3) unsigned,
   `def_iv` tinyint(3) unsigned,
   `sta_iv` tinyint(3) unsigned
--   SPATIAL INDEX(`location`)
  )
  AS (
  SELECT location, cast(first_encounter AS SIGNED) as 'first_encounter', cast(expire_timestamp AS SIGNED) as 'expire_timestamp', expire_timestamp_verified, stats_reset, cast(last_encounter AS SIGNED) as 'last_encounter', cast(seen_wild AS SIGNED) as 'seen_wild', cast(seen_stop AS SIGNED) as 'seen_stop', cast(seen_cell AS SIGNED) as 'seen_cell',atk_iv,def_iv,sta_iv 
  FROM rdmdb.pokemon_history
  WHERE
  least(ifnull(first_encounter,seen_wild),seen_wild) >= @period and
  least(ifnull(first_encounter,seen_wild),seen_wild) < @stop);

-- get areas
SET @row_number = 0;
DROP TEMPORARY TABLE IF EXISTS rdmstats.areas;
CREATE TEMPORARY TABLE rdmstats.areas AS (
  SELECT (@row_number:=@row_number + 1) as 'id',area,fence,st
  FROM rdmstats.geofences
  WHERE st is not NULL and type = 'mon');

-- process fences
BEGIN
  SET @max = (select max(id) from rdmstats.areas);
  SET @current = 1;

  WHILE @current <= @max DO
    INSERT IGNORE INTO rdmstats.stats_mon_area (datetime,rpl,area,fence,totMon,ivMon,verifiedEnc,verifiedReEnc,verifiedWild,encSecLeft,wildSecLeft,resetMon,re_encSecLeft,encTthMax5,encTth5to10,encTth10to15,encTth15to20,encTth20to25,encTth25to30,encTth30to35,encTth35to40,encTth40to45,encTth45to50,encTth50to55,encTthMin55,numWiEnc,numSpWi,numSpEnc,numCeWi,numCeEnc,secWiEnc,secSpWi,secSpEnc,secCeWi,secCeEnc,iv100)
    SELECT
    from_unixtime(@period) as 'period',
    15 as 'rpl',
    area,
    fence,
    count(*) as 'totMon',
    sum(case when first_encounter is not NULL then 1 end) as 'ivMon',
    sum(case when first_encounter is not NULL and expire_timestamp_verified = 1 then 1 end) as 'verifiedEnc',
    ifnull(sum(case when stats_reset is not NULL and last_encounter >= stats_reset and expire_timestamp_verified = 1 then 1 end),0) as 'verifiedReEnc',
    sum(case when seen_wild is not NULL and expire_timestamp_verified = 1 then 1 end) as 'verifiedWild',
    sum(case when first_encounter is not NULL and expire_timestamp_verified = 1 then expire_timestamp-first_encounter end) as 'encSecLeft',
    sum(case when seen_wild is not NULL and expire_timestamp_verified = 1 then expire_timestamp-seen_wild end) as 'wildSecLeft',
    ifnull(sum(case when stats_reset is not NULL then 1 end),0) as 'resetMon',
    ifnull(sum(case when stats_reset is not NULL and last_encounter >= stats_reset and expire_timestamp_verified = 1 then expire_timestamp-last_encounter end),0) as 're_encSecLeft',

    ifnull(sum(case when expire_timestamp-first_encounter < 5*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTthMax5',
    ifnull(sum(case when expire_timestamp-first_encounter < 10*60 and expire_timestamp-first_encounter >= 5*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth5to10',
    ifnull(sum(case when expire_timestamp-first_encounter < 15*60 and expire_timestamp-first_encounter >= 10*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth10to15',
    ifnull(sum(case when expire_timestamp-first_encounter < 20*60 and expire_timestamp-first_encounter >= 15*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth15to20',
    ifnull(sum(case when expire_timestamp-first_encounter < 25*60 and expire_timestamp-first_encounter >= 20*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth20to25',
    ifnull(sum(case when expire_timestamp-first_encounter < 30*60 and expire_timestamp-first_encounter >= 25*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth25to30',
    ifnull(sum(case when expire_timestamp-first_encounter < 35*60 and expire_timestamp-first_encounter >= 30*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth30to35',
    ifnull(sum(case when expire_timestamp-first_encounter < 40*60 and expire_timestamp-first_encounter >= 35*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth35to40',
    ifnull(sum(case when expire_timestamp-first_encounter < 45*60 and expire_timestamp-first_encounter >= 40*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth40to45',
    ifnull(sum(case when expire_timestamp-first_encounter < 50*60 and expire_timestamp-first_encounter >= 45*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth45to50',
    ifnull(sum(case when expire_timestamp-first_encounter < 55*60 and expire_timestamp-first_encounter >= 50*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTth50to55',
    ifnull(sum(case when expire_timestamp-first_encounter >= 55*60 and expire_timestamp_verified = 1 then 1 end),0) as 'encTthMin55',

    ifnull(sum(case when seen_wild is not NULL and first_encounter is not NULL and first_encounter - seen_wild > 1 then 1 end),0) as 'numWiEnc',
    ifnull(sum(case when seen_stop is not NULL and seen_wild is not NULL and seen_wild - seen_stop > 1 then 1 end),0) as 'numSpWi',
    ifnull(sum(case when seen_stop is not NULL and first_encounter is not NULL and first_encounter - seen_stop > 1 then 1 end),0) as 'numSpEnc',
    ifnull(sum(case when seen_cell is not NULL and seen_wild is not NULL and seen_wild - seen_cell > 1 then 1 end),0) as 'numCeWi',
    ifnull(sum(case when seen_cell is not NULL and first_encounter is not NULL and first_encounter - seen_cell > 1 then 1 end),0) as 'numCeEnc',

    ifnull(sum(case when seen_wild is not NULL and first_encounter is not NULL and first_encounter - seen_wild > 1 then first_encounter - seen_wild end),0) as 'secWiEnc',
    ifnull(sum(case when seen_stop is not NULL and seen_wild is not NULL and seen_wild - seen_stop > 1 then seen_wild - seen_stop end),0) as 'secSpWi',
    ifnull(sum(case when seen_stop is not NULL and first_encounter is not NULL and first_encounter - seen_stop > 1 then first_encounter - seen_stop end),0) as 'secSpEnc',
    ifnull(sum(case when seen_cell is not NULL and seen_wild is not NULL and seen_wild - seen_cell > 1 then seen_wild - seen_cell end),0) as 'secCeWi',
    ifnull(sum(case when seen_cell is not NULL and first_encounter is not NULL and first_encounter - seen_cell > 1 then first_encounter - seen_cell end),0) as 'secCeEnc',
    ifnull(sum(case when atk_iv=15 and def_iv=15 and sta_iv=15 then 1 end),0) as 'iv100'
	  
    FROM rdmstats.monarea, rdmstats.areas
    WHERE id = @current and ST_CONTAINS(st, location)
    GROUP BY area,fence;

    SET @current = @current + 1;

  END WHILE;
END;

DROP TEMPORARY TABLE rdmstats.monarea;
DROP TEMPORARY TABLE rdmstats.areas;

END
//
DELIMITER ;


DROP PROCEDURE IF EXISTS rdmstats.rpl15spawnarea;
DELIMITER //
CREATE PROCEDURE rdmstats.rpl15spawnarea()
BEGIN

-- set vars
  SET @period = (select unix_timestamp(concat(date(now() - interval 15 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 15 minute)) DIV 900) * 900))) );
  SET @stop = (select unix_timestamp(concat(date(now() - interval 0 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 0 minute)) DIV 900) * 900))) );

-- get data
DROP TEMPORARY TABLE IF EXISTS rdmstats.spawnarea;
CREATE TEMPORARY TABLE rdmstats.spawnarea
  (`location` point NOT NULL,
   `id` bigint(20) unsigned,
   `despawn_sec` smallint(5) unsigned,
   `last_seen` int(10) unsigned
--   SPATIAL INDEX(`location`)
  )
  AS (
  SELECT point(lat,lon) as 'location', id, despawn_sec, last_seen
  FROM rdmdb.spawnpoint);

-- get areas
SET @row_number = 0;
DROP TEMPORARY TABLE IF EXISTS rdmstats.areas;
CREATE TEMPORARY TABLE rdmstats.areas AS (
  SELECT (@row_number:=@row_number + 1) as 'id',area,fence,st
  FROM rdmstats.geofences
  WHERE st is not NULL and type = 'mon');

-- process fences
BEGIN
  SET @max = (select max(id) from rdmstats.areas);
  SET @current = 1;

  WHILE @current <= @max DO
    INSERT IGNORE INTO rdmstats.stats_spawnpoint (datetime,rpl,area,fence,spawnpoints,verified,seen,1d,3d,5d,7d,14d)
    SELECT
    from_unixtime(@period) as 'period',
    15 as 'rpl',
    area,
    fence,
    count(a.id) as 'spawnpoints',
    sum(case when despawn_sec is not NULL then 1 end) as 'verified',
    sum(case when date(from_unixtime(last_seen)) = date(from_unixtime(@period)) then 1 end) as 'seen',
    ifnull(sum(case when last_seen < unix_timestamp(now() - interval 1 day) then 1 end),0) as '1d',
    ifnull(sum(case when last_seen < unix_timestamp(now() - interval 3 day) then 1 end),0) as '3d',
    ifnull(sum(case when last_seen < unix_timestamp(now() - interval 5 day) then 1 end),0) as '5d',
    ifnull(sum(case when last_seen < unix_timestamp(now() - interval 7 day) then 1 end),0) as '7d',
    ifnull(sum(case when last_seen < unix_timestamp(now() - interval 14 day) then 1 end),0) as '14d'

    FROM rdmstats.spawnarea a, rdmstats.areas b
    WHERE b.id = @current and ST_CONTAINS(st, location)
    GROUP BY area,fence;

    SET @current = @current + 1;
  END WHILE;
END;

DROP TEMPORARY TABLE rdmstats.spawnarea;
DROP TEMPORARY TABLE rdmstats.areas;

END
//
DELIMITER ;

DROP PROCEDURE IF EXISTS rdmstats.rpl15questarea;
DELIMITER //
CREATE PROCEDURE rdmstats.rpl15questarea()
BEGIN

-- set vars
  SET @period = (select unix_timestamp(concat(date(now() - interval 15 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 15 minute)) DIV 900) * 900))) );
  SET @stop = (select unix_timestamp(concat(date(now() - interval 0 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 0 minute)) DIV 900) * 900))) );
  SET @perioddate = (select unix_timestamp(date(from_unixtime(@period))));

-- get data
DROP TEMPORARY TABLE IF EXISTS rdmstats.questarea;
CREATE TEMPORARY TABLE rdmstats.questarea AS (
  SELECT id, point(lat,lon) as 'location', cast(quest_timestamp AS SIGNED) as 'arTime', cast(alternative_quest_timestamp AS SIGNED) as 'nonarTime'
  FROM rdmdb.pokestop
  );

-- get areas
SET @row_number = 0;
DROP TEMPORARY TABLE IF EXISTS rdmstats.areas;
CREATE TEMPORARY TABLE rdmstats.areas AS (
  SELECT (@row_number:=@row_number + 1) as 'id',area,fence,st
  FROM rdmstats.geofences
  WHERE st is not NULL and type = 'quest');

-- process fences
BEGIN
  SET @max = (select max(id) from rdmstats.areas);
  SET @current = 1;

  WHILE @current <= @max DO
    INSERT IGNORE INTO rdmstats.stats_quest_area (datetime,rpl,area,fence,stops,AR,nonAR,ARcum,nonARcum)
    SELECT
    from_unixtime(@period) as 'period',
    15 as 'rpl',
    area,
    fence,
    count(a.id) as 'stops',
    ifnull(sum(case when arTime >= @period and arTime < @stop then 1 end),0) as 'AR',
    ifnull(sum(case when nonarTime >= @period and nonarTime < @stop then 1 end),0) as 'nonAR',
    ifnull(sum(case when arTime >= @perioddate and arTime < @stop then 1 end),0) as 'ARcum',
    ifnull(sum(case when nonarTime >= @perioddate and nonarTime < @stop then 1 end),0) as 'nonARcum'
    FROM rdmstats.questarea a, rdmstats.areas b
    WHERE b.id = @current and ST_CONTAINS(st, location)
    GROUP BY area,fence;

    SET @current = @current + 1;
  END WHILE;
END;

DROP TEMPORARY TABLE rdmstats.questarea;
DROP TEMPORARY TABLE rdmstats.areas;

END
//
DELIMITER ;

DROP PROCEDURE IF EXISTS rdmdb.historyCleanup;
DELIMITER //
CREATE PROCEDURE rdmdb.historyCleanup()
BEGIN

-- get data
DROP TEMPORARY TABLE IF EXISTS rdmdb.historyCleanup;
CREATE TEMPORARY TABLE rdmdb.historyCleanup AS (
  SELECT id
  FROM rdmdb.pokemon_history
  WHERE expire_timestamp < unix_timestamp() - (XXYY*86400)
  );

DELETE pokemon_history FROM rdmdb.pokemon_history JOIN rdmdb.historyCleanup ON rdmdb.pokemon_history.id = rdmdb.historyCleanup.id; 

DROP TEMPORARY TABLE rdmdb.historyCleanup;

END
//
DELIMITER ;
